import L from 'leaflet';
import { MAP_CONFIG, MAP_ICONS, TILE_LAYER_CONFIG } from './map_config';

/**
 * @typedef {Object} AddMarkerOptions
 * @property {L.Icon} [icon] - The icon to use for the marker
 * @property {string} [key] - A unique identifier for the marker (autogenerated if left blank)
 * @property {string} [popup] - Text that should be shown when the marker is clicked
 */
const addMarkerDefaultOpts = {
  icon: MAP_ICONS.trip,
};

/**
 * Wrapper class for Leaflet map instances
 */
class _RoamioMap {
  /**
   * Create a Roamio map.
   * @param {string} [mapId='map'] - the HTML element ID to render the map within.
   */
  constructor(mapId = 'map') {
    this.mapId = mapId;
    this.markers = new Map(); // JavaScript map, not leaflet
    this.markersFG = L.featureGroup();
    this.viewSettings = new Map();
  }

  /**
   * Creates a new Leaflet map instance and adds a tile layer
   * with configurations predefined in map_config.js.
   */
  initialise() {
    this.map = L.map(this.mapId, MAP_CONFIG);
    this.markersFG.addTo(this.map);

    // Re-add all layers, otherwise they won't display on the map when tabbing back to it
    this.markersFG.eachLayer((layer) => {
      this.markersFG.removeLayer(layer);
      this.markersFG.addLayer(layer);
    });

    const tileLayer = L.tileLayer(TILE_LAYER_CONFIG.url, TILE_LAYER_CONFIG.options);
    this.map.addLayer(tileLayer);

    // Set any saved view settings
    if (this.viewSettings.has('coords')) {
      this.map.setView(this.viewSettings.get('coords'), this.viewSettings.get('zoom'), { animate: false });
    }

    this.map.on('moveend', this.saveView.bind(this));
  }

  /**
   * Adds a marker to the map, and fits the bounds of the map such that all markers are visible
   * @param {L.LatLng} latLng - the coordinates of the marker
   * @param {AddMarkerOptions} options - options to use for the marker
   */
  addMarker(latLng, options = {}) {
    const fullOptions = { ...addMarkerDefaultOpts, ...options };

    // auto-assign key if none passed
    const markerKey = fullOptions.key || this.markers.size.toString();

    if (this.markers.has(markerKey)) {
      return;
    }

    const marker = L.marker(latLng, { icon: fullOptions.icon }).bindPopup(fullOptions.popup);
    this.markers.set(markerKey, marker);
    this.markersFG.addLayer(marker);

    // Fit map to bounds of feature group
    this.map.fitBounds(this.markersFG.getBounds().pad(0.25));
  }

  /**
   * Saves the current view to config
   */
  saveView() {
    this.viewSettings.set('coords', this.map.getCenter());
    this.viewSettings.set('zoom', this.map.getZoom());
  }
}

/**
 * Create a new RoamioMap instance.
 * @param {string} mapId - The ID of the map element.
 * @returns {_RoamioMap} A new RoamioMap instance.
 */
function newRoamioMap(mapId) {
  return new _RoamioMap(mapId);
}

// Create and export singleton instance of RoamioMap
const RoamioMap = newRoamioMap('map');
export default RoamioMap;
export { newRoamioMap };
