= simple_form_for(plan,
                  builder: ValidatedFormBuilder,
                  is_form_submitted: errors.present?,
                  html: { class: "d-flex flex-column gap-2" }) do |f|
  = f.validated_input(:title,
                      get_formatted_errors(errors, :title),
                      placeholder: "Enter the title of the plan...")
  = f.validated_select(:plan_type,
                       options_for_select(Plan.plan_types.keys.map { |name| [name.humanize.titleize, name] },
                                          selected: plan.plan_type),
                       get_formatted_errors(errors, :plan_type),
                       prompt: "Select plan type",
                       required: true)

  %div
    = f.label("Start location", class: "mb-1", for: "#start-location-autocomplete")
    #start-location-autocomplete.form-control-plaintext{ class: errors&.include?(:start_location_name) && "is-invalid" }
    .invalid-feedback
      = simple_format(get_formatted_errors(errors, :start_location_name), {}, wrapper_tag: "span")
  #end-location-container.d-none
    = f.label("End location", class: "mb-1", for: "#start-location-autocomplete")
    #end-location-autocomplete.form-control-plaintext{ class: errors&.include?(:end_location_name) && "is-invalid" }
    .invalid-feedback
      = simple_format(get_formatted_errors(errors, :end_location_name), {}, wrapper_tag: "span")

  #map

  = f.validated_datetime(:start_date, get_formatted_errors(errors, :start_date), required: true)
  = f.validated_datetime(:end_date, get_formatted_errors(errors, :end_date), required: true)

  = f.button(:submit, "Save", class: "btn btn-primary fw-semibold")

  = f.input(:start_location_name, as: :hidden)
  = f.input(:end_location_name, as: :hidden)
  = f.input(:start_location_latitude, as: :hidden)
  = f.input(:start_location_longitude, as: :hidden)
  = f.input(:end_location_latitude, as: :hidden)
  = f.input(:end_location_longitude, as: :hidden)
